ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq)+1)) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(sqrt(eatout)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq)+1)) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(log(delivery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Delivered Food")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8,ncol=2)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq)+1)) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(log(delivery)+1)) + geom_histogram() +
ggtitle("Log Money Spent on Delivered Food")
plot9 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot10 = ggplot(df_adult, aes(log(meals_nothome)+1)) + geom_histogram() +
ggtitle("Log Number of Meals Not Home Prepared")
plot11 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot12 = ggplot(df_adult, aes(log(meals_fastfood)+1)) + geom_histogram() +
ggtitle("Log Number of Fast Food Meals")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol=2)
install.packages("hmisc")
install.packages("Hmisc")
install.packages("SASxport")
library(SASxport)
library(SASxport)
lookup.xport("DEMO_I.XPT")
lookup.xport("data/DEMO_I.XPT")
demo15 = read.xport("data/DEMO_I.XPT")
head(demo15)
demo15$SEQN == demographics$SEQN
demographics$SEQN[1]
demographocs[demographics$SEQN == 73557]
demographics[demographics$SEQN == 73557]
demographics[demographics$SEQN == 73557,]
# numeric predictor variable distributions
plot1 = ggplot(df_adult, aes(age)) + geom_histogram() +
ggtitle("Age")
library(dplyr)
demographics = read.csv("data/health/demographic.csv")
ques = read.csv("data/health/questionnaire.csv")
exam = read.csv("data/health/examination.csv")
# join tables by participant ID
df = inner_join(demographics, ques, by="SEQN")
df = inner_join(df, exam, by="SEQN")
dim(df)
# subset df to consider only the variables we're interested in
response = "BMXBMI"
predictors = c("RIAGENDR", "RIDAGEYR", "RIDRETH3", "DMDEDUC2", "DMDMARTL", "DMDFMSIZ", "INDFMIN2",
"ALQ101", "ALQ120Q",
"CBD070", "CBD120", "CBD130",
"DBD895", "DBD900", "DBQ197",
"DPQ020", "DPQ030",
"PAQ710", "PAQ665",
"SLD010H", "SMQ040")
columns = c(predictors, response)
df = df[names(df) %in% columns]
# rename columns to more intuitive names
df = rename(df, gender = RIAGENDR, age = RIDAGEYR, race = RIDRETH3, edu = DMDEDUC2,
marriage = DMDMARTL, famsize = DMDFMSIZ, famincome = INDFMIN2,
alcohol12yr = ALQ101, alcoholfrq = ALQ120Q, grocery = CBD070, eatout = CBD120,
delivery = CBD130, milk = DBQ197, meals_nothome = DBD895, meals_fastfood = DBD900,
depressed = DPQ020, sleep_trouble = DPQ030, tv_hrs = PAQ710,
sleep_hr = SLD010H, smoke = SMQ040, bmi = BMXBMI,activity=PAQ665)
# subset the df to consider only adults aged 20 or above
df_adult = df[df$age > 20,]
# subset the data to exclude refused/don't know/missing data
# demographics variables
df_adult = df_adult[which(df_adult$edu!=7 & df_adult$edu!=9),]
df_adult = df_adult[which(df_adult$activity!=7 & df_adult$activity!=9),]
df_adult = df_adult[which(df_adult$marriage!=77 & df_adult$marriage!=99),]
df_adult = df_adult[which(df_adult$famincome!=77 & df_adult$famincome!=99),]
# alcohol use variables
df_adult = df_adult[which(df_adult$alcohol12yr!=7 & df_adult$alcohol12yr!=9),]
df_adult = df_adult[which(df_adult$alcoholfrq!=777 & df_adult$alcoholfrq!=999),]
# consumer behavior variables
df_adult = df_adult[which(df_adult$grocery!=777777 & df_adult$grocery!=999999),]
df_adult = df_adult[which(df_adult$eatout!=777777 & df_adult$eatout!=999999),]
df_adult = df_adult[which(df_adult$delivery!=777777 & df_adult$delivery!=999999),]
# diet behavior variables
df_adult = df_adult[which(df_adult$meals_nothome != 5555 & df_adult$meals_nothome != 7777 & df_adult$meals_nothome != 9999),]
df_adult = df_adult[which(df_adult$meals_fastfood != 5555 & df_adult$meals_fastfood != 7777 & df_adult$meals_fastfood != 9999),]
# physical activity variables
#df_adult$tv_hrs[which(df_adult$tv_hrs == 0)] = 1
#df_adult$tv_hrs[which(df_adult$tv_hrs == 8)] = 0
df_adult = df_adult[which(df_adult$tv_hrs != 77 & df_adult$tv_hrs != 99),]
# mental health variables
df_adult = df_adult[which(df_adult$depressed!=7 & df_adult$depressed!=9),]
df_adult = df_adult[which(df_adult$sleep_trouble!=7 & df_adult$sleep_trouble!=9),]
# sleeping behavior variables
df_adult = df_adult[which(df_adult$sleep_hr != 99),]
# smoking behavior variables
df_adult$smoke[which(is.na(df_adult$smoke))] = "missing"
df_adult$smoke[which(is.na(df_adult$activity))] = "missing"
# after dropping observations missing bmi, there were only 3 missing height
# so we drop these observations too
drop_obs = c("bmi")
for (feature in drop_obs){
df_adult = df_adult[!is.na(df_adult[feature]),]
}
# feature engineering
df_adult$marriage[which(df_adult$marriage==1)]="married/living_with_partner"
df_adult$marriage[which(df_adult$marriage==6)]="married/living_with_partner"
df_adult$marriage[which(df_adult$marriage==3)]="divorced/separated"
df_adult$marriage[which(df_adult$marriage==4)]="divorced/separated"
df_adult$marriage[which(df_adult$marriage==2)]="widowed"
df_adult$marriage[which(df_adult$marriage==5)]="never_married"
df_adult$tv_hrs[which(df_adult$tv_hrs == 0)]= "1hr_or_less"
df_adult$tv_hrs[which(df_adult$tv_hrs==1)] ="1hr_or_less"
df_adult$tv_hrs[which(df_adult$tv_hrs == 8)] = "0hr"
df_adult$tv_hrs[which(df_adult$tv_hrs == 2)]  = "2-4hrs"
df_adult$tv_hrs[which(df_adult$tv_hrs == 3)]= "2-4hrs"
df_adult$tv_hrs[which(df_adult$tv_hrs == 4)]= "2-4hrs"
df_adult$tv_hrs[which(df_adult$tv_hrs == 5)] = "5hrs_or_more"
new_bmi = df_adult$bmi
df_adult["bmi_class"] = new_bmi
df_adult$bmi_class[which(df_adult$bmi_class >= 40)] = "class 3 obesity"
df_adult$bmi_class[which(df_adult$bmi_class >= 30 & df_adult$bmi_class < 40)] = "obese"
df_adult$bmi_class[which(df_adult$bmi_class >= 25 & df_adult$bmi_class < 30)] = "overweight"
df_adult$bmi_class[which(df_adult$bmi_class >= 18.5 & df_adult$bmi_class < 25)] = "healthy"
df_adult$bmi_class[which(df_adult$bmi_class < 18.5)] = "underweight"
# save variable names into lists of categorical or numeric faetures
categorical_features = c("gender", "race", "edu", "marriage",
"famincome", "alcohol12yr", "milk", "depressed",
"sleep_trouble", "smoke", "tv_hrs","activity")
numeric_features = c("height","age", "famsize", "alcoholfrq", "grocery", "eatout",
"delivery", "meals_nothome", "meals_fastfood", "sleep_hr")
#drop famincome 12,13
df_adult = df_adult[!(df_adult$famincome==12 | df_adult$famincome==13),]
# convert categorical variables into factors
df_adult[categorical_features] = lapply(df_adult[categorical_features], factor)
levels(df_adult$activity) = c(1, 2)
levels(df_adult$activity) = c("Yes", "No")
#edu
levels(df_adult$edu) = c(1, 1, 2, 3, 3)
levels(df_adult$edu) = c("High School Below", "High School", "High School Above")
#famincome
levels(df_adult$famincome) = c(rep(1, 5), rep(2, 3), rep(3, 2), 4, 5 )
levels(df_adult$famincome) = c("below 25k", "25k~55k", "55k~75k", "75k~100k", "above 100k")
apply(df_adult, 2, function(x) sum(is.na(x))) # check how many missing data
sapply(df_adult, class) # check data classes
library(ggplot2)
require(gridExtra)
transform1 = log(df_adult$bmi)
transform2 = log(log(df_adult$bmi))
# response variable distribution
plot1 = ggplot(df_adult, aes(bmi)) +
geom_histogram() +
ggtitle("BMI")
plot2 = ggplot(df_adult, aes(transform1)) +
geom_histogram() +
ggtitle("Log(BMI)")
plot3 = ggplot(df_adult, aes(transform2)) +
geom_histogram() +
ggtitle("Log(Log(BMI))")
grid.arrange(plot1, plot2, plot3, ncol=3)
plot1 = ggplot(df_adult, aes(x=gender, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Gender", y="log(bmi)") +
ggtitle("bmi by Gender") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot2 = ggplot(df_adult, aes(x=race, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Race", y="log(bmi)") +
ggtitle("bmi by Race") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot3 = ggplot(df_adult, aes(x=edu, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Education Level", y="log(bmi)") +
ggtitle("bmi by Education Level") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot4 = ggplot(df_adult, aes(x=marriage, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Marital Status", y="log(bmi)") +
ggtitle("bmi by Marital Status") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot5 = ggplot(df_adult, aes(x=famincome, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Family Income", y="log(bmi)") +
ggtitle("bmi by Family Income") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot6 = ggplot(df_adult, aes(x=alcohol12yr, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Alcohol Use", y="log(bmi)") +
ggtitle("bmi by Alcohol Use") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot7 = ggplot(df_adult, aes(x=milk, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Milk Consumption", y="log(bmi)") +
ggtitle("bmi by Milk Consumption") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot8 = ggplot(df_adult, aes(x=depressed, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Depressed", y="log(bmi)") +
ggtitle("bmi by Despressed") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot9 = ggplot(df_adult, aes(x=sleep_trouble, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Alcohol Use", y="log(bmi)") +
ggtitle("bmi by Sleep Trouble") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot10 = ggplot(df_adult, aes(x=smoke, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Smoke", y="log(bmi)") +
ggtitle("bmi by Smoke") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot11 = ggplot(df_adult, aes(x=tv_hrs, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="TV Consumption", y="log(bmi)") +
ggtitle("bmi by TV Consumption") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
plot12 = ggplot(df_adult, aes(x=activity, y = log(bmi))) + geom_boxplot() +
theme(axis.text.x = element_text(angle=90)) +
labs(x="Moderate Activities At Least 10 min Continuously per Week", y="log(bmi)") +
ggtitle("bmi by Moderate Recreational Activities") + theme(axis.text=element_text(size=25),axis.title=element_text(size=28,face="bold"),title =element_text(size=30, face='bold'))
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol=3)
# numeric predictor variable distributions
plot1 = ggplot(df_adult, aes(age)) + geom_histogram() +
ggtitle("Age")
plot2 = ggplot(df_adult, aes(height)) + geom_histogram() +
ggtitle("Height")
plot3 = ggplot(df_adult, aes(famsize)) + geom_histogram() +
ggtitle("Family Size")
plot4 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot5 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot6 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot9 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot10 = ggplot(df_adult, aes(sleep_hr)) + geom_histogram() +
ggtitle("Hours of Sleep")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, ncol=3)
# numeric predictor variable distributions
plot1 = ggplot(df_adult, aes(age)) + geom_histogram() +
ggtitle("Age")
plot3 = ggplot(df_adult, aes(famsize)) + geom_histogram() +
ggtitle("Family Size")
plot4 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot5 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot6 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot9 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot10 = ggplot(df_adult, aes(sleep_hr)) + geom_histogram() +
ggtitle("Hours of Sleep")
grid.arrange(plot1, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, ncol=3)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq+1))) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout+1))) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(log(delivery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Delivered Food")
plot9 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot10 = ggplot(df_adult, aes(log(meals_nothome+1))) + geom_histogram() +
ggtitle("Log Number of Meals Not Home Prepared")
plot11 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot12 = ggplot(df_adult, aes(log(meals_fastfood+1))) + geom_histogram() +
ggtitle("Log Number of Fast Food Meals")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol=3)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq+1))) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout+1))) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(log(delivery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Delivered Food")
plot9 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot10 = ggplot(df_adult, aes(log(meals_nothome+1))) + geom_histogram() +
ggtitle("Log Number of Meals Not Home Prepared")
plot11 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot12 = ggplot(df_adult, aes(log(meals_fastfood+1))) + geom_histogram() +
ggtitle("Log Number of Fast Food Meals")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol=3)
# transformations on numeric predictor variables
plot1 = ggplot(df_adult, aes(alcoholfrq)) + geom_histogram() +
ggtitle("Frequency of Alcohol Consumption")
plot2 = ggplot(df_adult, aes(log(alcoholfrq+1))) + geom_histogram() +
ggtitle("Log Frequency of Alcohol Consumption")
plot3 = ggplot(df_adult, aes(grocery)) + geom_histogram() +
ggtitle("Money Spent on Grocery")
plot4 = ggplot(df_adult, aes(log(grocery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Grocery")
plot5 = ggplot(df_adult, aes(eatout)) + geom_histogram() +
ggtitle("Money Spent on Eating Out")
plot6 = ggplot(df_adult, aes(log(eatout+1))) + geom_histogram() +
ggtitle("Log Money Spent on Eating Out")
plot7 = ggplot(df_adult, aes(delivery)) + geom_histogram() +
ggtitle("Money Spent on Delivered Food")
plot8 = ggplot(df_adult, aes(log(delivery+1))) + geom_histogram() +
ggtitle("Log Money Spent on Delivered Food")
plot9 = ggplot(df_adult, aes(meals_nothome)) + geom_histogram() +
ggtitle("Number of Meals Not Home Prepared")
plot10 = ggplot(df_adult, aes(log(meals_nothome+1))) + geom_histogram() +
ggtitle("Log Number of Meals Not Home Prepared")
plot11 = ggplot(df_adult, aes(meals_fastfood)) + geom_histogram() +
ggtitle("Number of Fast Food Meals")
plot12 = ggplot(df_adult, aes(log(meals_fastfood+1))) + geom_histogram() +
ggtitle("Log Number of Fast Food Meals")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol=3)
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
levels(df_adult$race)
levels(df_adult$edu)
levels(df_adult$alcohol12yr)
levels(df_adult$milk)
levels(df_adult$depressed)
levels(df_adult$sleep_trouble)
levels(df_adult$smoke)
library(dplyr)
demographics = read.csv("data/health/demographic.csv")
ques = read.csv("data/health/questionnaire.csv")
exam = read.csv("data/health/examination.csv")
# join tables by participant ID
df = inner_join(demographics, ques, by="SEQN")
df = inner_join(df, exam, by="SEQN")
# subset df to consider only the variables we're interested in
response = "BMXBMI"
predictors = c("RIAGENDR", "RIDAGEYR", "RIDRETH3", "DMDEDUC2", "DMDMARTL", "DMDFMSIZ", "INDFMIN2",
"ALQ101", "ALQ120Q",
"CBD070", "CBD120", "CBD130",
"DBD895", "DBD900", "DBQ197",
"DPQ020", "DPQ030",
"PAQ710", "PAQ665",
"SLD010H", "SMQ040")
columns = c(predictors, response)
df = df[names(df) %in% columns]
# rename columns to more intuitive names
df = rename(df, gender = RIAGENDR, age = RIDAGEYR, race = RIDRETH3, edu = DMDEDUC2,
marriage = DMDMARTL, famsize = DMDFMSIZ, famincome = INDFMIN2,
alcohol12yr = ALQ101, alcoholfrq = ALQ120Q, grocery = CBD070, eatout = CBD120,
delivery = CBD130, milk = DBQ197, meals_nothome = DBD895, meals_fastfood = DBD900,
depressed = DPQ020, sleep_trouble = DPQ030, tv_hrs = PAQ710,
sleep_hr = SLD010H, smoke = SMQ040, bmi = BMXBMI, activity=PAQ665)
# subset the df to consider only adults aged 20 or above
df_adult = df[df$age > 20,]
# subset the data to exclude refused/don't know/missing data
# demographics variables
df_adult = df_adult[which(df_adult$edu!=7 & df_adult$edu!=9),]
df_adult = df_adult[which(df_adult$activity!=7 & df_adult$activity!=9),]
df_adult = df_adult[which(df_adult$marriage!=77 & df_adult$marriage!=99),]
df_adult = df_adult[which(df_adult$famincome!=77 & df_adult$famincome!=99),]
# alcohol use variables
df_adult = df_adult[which(df_adult$alcohol12yr!=7 & df_adult$alcohol12yr!=9),]
df_adult = df_adult[which(df_adult$alcoholfrq!=777 & df_adult$alcoholfrq!=999),]
# consumer behavior variables
df_adult = df_adult[which(df_adult$grocery!=777777 & df_adult$grocery!=999999),]
df_adult = df_adult[which(df_adult$eatout!=777777 & df_adult$eatout!=999999),]
df_adult = df_adult[which(df_adult$delivery!=777777 & df_adult$delivery!=999999),]
# diet behavior variables
df_adult = df_adult[which(df_adult$meals_nothome != 5555 & df_adult$meals_nothome != 7777 & df_adult$meals_nothome != 9999),]
df_adult = df_adult[which(df_adult$meals_fastfood != 5555 & df_adult$meals_fastfood != 7777 & df_adult$meals_fastfood != 9999),]
# physical activity variables
df_adult = df_adult[which(df_adult$tv_hrs != 77 & df_adult$tv_hrs != 99),]
# mental health variables
df_adult = df_adult[which(df_adult$depressed!=7 & df_adult$depressed!=9),]
df_adult = df_adult[which(df_adult$sleep_trouble!=7 & df_adult$sleep_trouble!=9),]
# sleeping behavior variables
df_adult = df_adult[which(df_adult$sleep_hr != 99),]
# smoking behavior variables
df_adult$smoke[which(is.na(df_adult$smoke))] = "missing"
df_adult$smoke[which(is.na(df_adult$activity))] = "missing"
# drop missing bmi observatioins
df_adult = df_adult[!is.na(df_adult$bmi),]
# feature engineering
df_adult$bmi_class = df_adult$bmi
df_adult$bmi_class[which(df_adult$bmi_class >= 40)] = "class 3 obesity"
df_adult$bmi_class[which(df_adult$bmi_class >= 30 & df_adult$bmi_class < 40)] = "obese"
df_adult$bmi_class[which(df_adult$bmi_class >= 25 & df_adult$bmi_class < 30)] = "overweight"
df_adult$bmi_class[which(df_adult$bmi_class >= 18.5 & df_adult$bmi_class < 25)] = "healthy"
df_adult$bmi_class[which(df_adult$bmi_class < 18.5)] = "underweight"
# save variable names into lists of categorical or numeric faetures
categorical_features = c("gender", "race", "edu", "marriage",
"famincome", "alcohol12yr", "milk", "depressed",
"sleep_trouble", "smoke", "tv_hrs","activity")
numeric_features = c("height","age", "famsize", "alcoholfrq", "grocery", "eatout",
"delivery", "meals_nothome", "meals_fastfood", "sleep_hr")
#drop famincome 12,13
df_adult = df_adult[!(df_adult$famincome==12 | df_adult$famincome==13),]
# convert categorical variables into factors
df_adult[categorical_features] = lapply(df_adult[categorical_features], factor)
#activity
levels(df_adult$activity) = c(1, 2)
levels(df_adult$activity) = c("Yes", "No")
#gender
levels(df_adult$gender) = c("male", "female")
#race
levels(df_adult$race) = c("mexican", "other hispanic", "white", "black", "asian", "other")
#edu
levels(df_adult$edu) = c(1, 1, 2, 3, 3)
levels(df_adult$edu) = c("below hs", "hs", "above hs")
#alcohol consumption
levels(df_adult$alcohol12yr) = c("yes", "no")
#milk
levels(df_adult$milk) = c("never", "rare", "sometimes", "often", "varied")
# depressed
levels(df_adult$depressed) = c("no", "sometimes", "often", "alwyas")
# sleep_trouble
levels(df_adult$sleep_trouble) = c("no", "sometimes", "often", "always")
#smoke
levels(df_adult$smoke) = c("everyday", "sometimes", "no", "missing")
#famincome
levels(df_adult$famincome) = c(rep(1, 5), rep(2, 3), rep(3, 2), 4, 5 )
levels(df_adult$famincome) = c("below 25k", "25k~55k", "55k~75k", "75k~100k", "above 100k")
#marriage
levels(df_adult$marriage) = c("married", "widowed", "divorced", "divorced", "never_married", "married")
#tv_hrs
levels(df_adult$tv_hrs) = c("1hr","1hr", "2~4hrs", "2~4hrs" , "2~4hrs", "5hrs", "0hr")
apply(df_adult, 2, function(x) sum(is.na(x))) # check how many missing data
sapply(df_adult, class) # check data classes
range(df_adult$meals_nothome)
max(df_adult$meals_nothome)
min(df_adult$meals_nothome)
library(dplyr)
demographics = read.csv("data/health/demographic.csv")
ques = read.csv("data/health/questionnaire.csv")
exam = read.csv("data/health/examination.csv")
# join tables by participant ID
df = inner_join(demographics, ques, by="SEQN")
df = inner_join(df, exam, by="SEQN")
# subset df to consider only the variables we're interested in
response = "BMXBMI"
predictors = c("RIAGENDR", "RIDAGEYR", "RIDRETH3", "DMDEDUC2", "DMDMARTL", "DMDFMSIZ", "INDFMIN2",
"ALQ101", "ALQ120Q",
"CBD070", "CBD120", "CBD130",
"DBD895", "DBD900", "DBQ197",
"DPQ020", "DPQ030",
"PAQ710", "PAQ665",
"SLD010H", "SMQ040")
columns = c(predictors, response)
df = df[names(df) %in% columns]
# rename columns to more intuitive names
df = rename(df, gender = RIAGENDR, age = RIDAGEYR, race = RIDRETH3, edu = DMDEDUC2,
marriage = DMDMARTL, famsize = DMDFMSIZ, famincome = INDFMIN2,
alcohol12yr = ALQ101, alcoholfrq = ALQ120Q, grocery = CBD070, eatout = CBD120,
delivery = CBD130, milk = DBQ197, meals_nothome = DBD895, meals_fastfood = DBD900,
depressed = DPQ020, sleep_trouble = DPQ030, tv_hrs = PAQ710,
sleep_hr = SLD010H, smoke = SMQ040, bmi = BMXBMI, activity=PAQ665)
# subset the df to consider only adults aged 20 or above
df_adult = df[df$age > 20,]
range(df_adult$meals_nothome)
